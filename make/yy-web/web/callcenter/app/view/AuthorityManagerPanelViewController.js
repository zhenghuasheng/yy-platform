/*
 * File: app/view/AuthorityManagerPanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CallCenterApp.view.AuthorityManagerPanelViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.authoritymanagerpanel',

    onSaveButtonClick: function (button, e, eOpts) {
        var treePanel = Ext.getCmp('AuthorityTreePanel');
        var nodes = treePanel.getChecked();
        if (nodes.length < 1) {
            return;
        }
        Ext.MessageBox.confirm('请确认', '您确认保存吗？', function (btn) {
            if (btn === 'no') {
                return;
            } else if (btn === 'yes') {

                var jsonArray = [];
                Ext.each(nodes, function (item) {
                    var id = item.data.id;
                    jsonArray.push({f_rsid: id, f_userid: 116});
                });
                var url = Ext.getStore('ConfigStore').getAt(0).get('WebServerUrl');
                Ext.Ajax.request({
                    url: url + "/action/authority/update.do",
                    params: {
                        authorityStr: JSON.stringify(jsonArray),
                    },

                    success: function (response) {
                        var text = response.responseText;
                        var result = JSON.parse(text);

                        if (result === null) {
                            Ext.Msg.alert('提示', '保存出错了，结果：' + result);
                            return;
                        }

                        if (result.succeed) {

                            alert('保存成功');

                        } else {
                            Ext.Msg.alert('提示', '保存出错了，错误：' + result.ptError);
                            return;
                        }
                    },

                    failure: function () {
                        Ext.Msg.alert('提示', '失败');
                    },
                });

            }

        });

    },

    onAuthorityTreePanelRender: function (component, eOpts) {
        /**获取LoginSuccessJsonStore中的data**/
        var LoginSuccessStore = Ext.getStore('LoginSuccessJsonStore');
        var userId = LoginSuccessStore.data.items[0].data.userId;


        var authorityTreeStore = component.getStore();
        var ajaxProxy = authorityTreeStore.getProxy();
        var url = Ext.getStore('ConfigStore').getAt(0).get('WebServerUrl');
        ajaxProxy.setUrl(url + "/action/authority/info.do?mnid=menuPanel&userId=" + userId);
        authorityTreeStore.load();
    },

    onAuthorityTreePanelCheckChange: function (node, checked, eOpts) {
        if (node.data.leaf === false) {
            /**非叶子节点**/
            if (node.data.checked) {
                /**已选中*/
                node.expand();
                var childNodes = node.childNodes;
                for (var i = 0; i < childNodes.length; i++) {
                    childNodes[i].data.checked = true;
                    var parentId = childNodes[i].data.parentId;
                    childNodes[i].updateInfo(true, {parentId: parentId});
                }

            } else {
                /**未选中*/
                node.expand();
                var childNodes = node.childNodes;
                for (var i = 0; i < childNodes.length; i++) {
                    childNodes[i].data.checked = false;
                    var parentId = childNodes[i].data.parentId;
                    childNodes[i].updateInfo(true, {parentId: parentId});
                }
            }


        } else {
            /**叶子节点*/
            if (!node.data.checked) {
                var childNodes = node.parentNode.childNodes;

                //node.parentNode.updateInfo({checked:false,parentId:node.parentNode.data.parentId});

            }
        }
    }

});
